// Copyright (c) Peter Robinson 2024
// SPDX-License-Identifier: MIT

// Code that executes keccak256 100 times in a row, and then if there is enough gas, loops around
// and does it again.
//
// If you change the code and there are compilation issues, compile the code separately 
// from the test system to understand what is happening.
// huffc -r -p src/Keccak256Me2.huff
//
// Assuming each loop takes 4322 gas, in a 30M gas block, the loop should run 6941 times.
// That would be 694,100 keccak256s per block.

#define function run() nonpayable returns ()


// Gas cost keccak256: 
// 3   dup1
// 2   returndatasize
// 36  keccak, assuming re-using the same word of memory, and only hashing one word
// 2   pop
// TOTAL: 43 gas

// Gas code doing loop:
// 3   dup2
// 2   gas
// 3   gt
// 3   push2   for the target address
// 10  jumpi
// 1   jumpdest
// TOTAL: 22
#define macro MAIN() = takes(0) returns(0) {
    0x1100                  // Amount of gas before stopping. 100 x 43 + a bit more.
    0x20                    // Push the number of bytes to hash. Having this between 1 and 0x20 so only one word is hashed.

loop:
    // 1
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 2
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 3
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 4
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 5
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 6
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 7
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 8
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 9 
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 10
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 11
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 12
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 13
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 14
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 15
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 16
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 17
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 18
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 19
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 20
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256


   // 21
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 22
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 23
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 24
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 25
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 26
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 27
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 28
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 29 
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 30
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 31
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 32
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 33
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 34
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 35
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 36
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 37
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 38
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 39
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 40
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 41
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 42
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 43
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 44
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 45
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 46
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 47
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 48
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 49 
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 50
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 51
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 52
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 53
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 54
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 55
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 56
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 57
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 58
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 59
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 60
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256


   // 61
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 62
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 63
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 64
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 65
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 66
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 67
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 68
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 69 
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 70
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 71
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 72
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 73
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 74
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 75
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 76
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 77
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 78
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 79
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 80
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 81
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 82
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 83
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 84
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 85
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 86
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 87
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 88
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 89 
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 90
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 91
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 92
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 93
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 94
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 95
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 96
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 97
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 98
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 99
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256

    // 100
    dup1                    // Make a copy of the number of bytes to hash
    returndatasize          // Set the memory offset to hash to zero
    sha3
    pop                     // Pop off the stack the result of keccak256





    dup2                    // Put gas before stopping at the top of the stack
    gas                     // Work out how much gas is remaining
    gt                      // Compare
    loop jumpi              // If gas used < gas to use, loop around again
    stop
}